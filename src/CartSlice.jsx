/**
 * Cart Redux Slice - Shopping Cart State Management
 * 
 * This file contains the Redux slice for managing shopping cart state.
 * A "slice" is a collection of Redux reducer logic and actions for a 
 * single feature of our app - in this case, the shopping cart.
 * 
 * Redux Toolkit createSlice():
 * - Automatically generates action creators and action types
 * - Uses Immer under the hood for immutable updates
 * - Reduces boilerplate code significantly
 * 
 * React Shopping Cart Patterns:
 * - Each item has: name, image, description, cost, quantity
 * - Prevent duplicate items by checking existing items
 * - Update quantities instead of adding duplicates
 * - Calculate totals dynamically
 */

import { createSlice } from '@reduxjs/toolkit';

/**
 * Cart Slice Definition
 * 
 * createSlice automatically generates:
 * - Action creators (addItem, removeItem, updateQuantity)
 * - Action types (cart/addItem, cart/removeItem, etc.)
 * - A reducer function that handles all these actions
 */
export const CartSlice = createSlice({
  name: 'cart', // This becomes the prefix for action types

  /**
   * Initial State
   * 
   * The starting state of our cart when the app loads
   * State shape: { items: Array<CartItem> }
   * 
   * Each CartItem will have:
   * - name: string
   * - image: string  
   * - description: string
   * - cost: string (e.g., "$15")
   * - quantity: number
   */
  initialState: {
    items: [], // Empty array - no items in cart initially
  },

  /**
   * Reducers Object
   * 
   * Each reducer is a pure function that:
   * 1. Receives current state and an action
   * 2. Returns new state based on the action
   * 
   * Redux Toolkit uses Immer, so we can "mutate" state directly
   * (it's actually creating immutable copies behind the scenes)
   */
  reducers: {
    /**
     * Add Item to Cart Reducer
     * 
     * Handles adding a new plant to the shopping cart
     * 
     * Logic:
     * 1. Check if item already exists in cart (by name)
     * 2. If exists: increment quantity by 1
     * 3. If new: add to cart with quantity 1
     * 
     * @param {Object} state - Current cart state
     * @param {Object} action - Action object with payload containing item data
     * @param {Object} action.payload - The plant item to add
     */
    addItem: (state, action) => {
      const { name, image, description, cost } = action.payload;
      
      // Find if this item already exists in the cart
      const existingItem = state.items.find(item => item.name === name);
      
      if (existingItem) {
        // Item exists: increment quantity
        existingItem.quantity += 1;
      } else {
        // New item: add to cart with quantity 1
        state.items.push({
          name,
          image,
          description,
          cost,
          quantity: 1 // Start with quantity of 1
        });
      }
    },

    /**
     * Remove Item from Cart Reducer
     * 
     * Completely removes an item from the cart regardless of quantity
     * 
     * @param {Object} state - Current cart state  
     * @param {Object} action - Action object with payload containing item name
     * @param {string} action.payload - The name of the item to remove
     */
    removeItem: (state, action) => {
      const itemName = action.payload;
      
      // Filter out the item with matching name
      // Array.filter creates new array without the removed item
      state.items = state.items.filter(item => item.name !== itemName);
    },

    /**
     * Update Item Quantity Reducer
     * 
     * Updates the quantity of a specific item in the cart
     * If quantity becomes 0 or less, removes the item entirely
     * 
     * @param {Object} state - Current cart state
     * @param {Object} action - Action object with payload
     * @param {string} action.payload.name - Name of item to update
     * @param {number} action.payload.quantity - New quantity value
     */
    updateQuantity: (state, action) => {
      const { name, quantity } = action.payload;
      
      // Find the item to update
      const itemToUpdate = state.items.find(item => item.name === name);
      
      if (itemToUpdate) {
        if (quantity <= 0) {
          // If quantity is 0 or negative, remove item from cart
          state.items = state.items.filter(item => item.name !== name);
        } else {
          // Update the quantity
          itemToUpdate.quantity = quantity;
        }
      }
    },
  },
});

/**
 * Export Action Creators
 * 
 * These are automatically generated by createSlice
 * Components can import and dispatch these actions:
 * 
 * Example usage in components:
 * import { addItem, removeItem, updateQuantity } from './CartSlice';
 * 
 * const dispatch = useDispatch();
 * dispatch(addItem({ name: "Snake Plant", cost: "$15", ... }));
 */
export const { addItem, removeItem, updateQuantity } = CartSlice.actions;

/**
 * Export the Reducer
 * 
 * This reducer function will be added to our store
 * The store will call this reducer whenever cart actions are dispatched
 * 
 * Selector Examples (for reading state in components):
 * const cartItems = useSelector(state => state.cart.items);
 * const itemCount = useSelector(state => state.cart.items.length);
 * const totalItems = useSelector(state => 
 *   state.cart.items.reduce((sum, item) => sum + item.quantity, 0)
 * );
 */
export default CartSlice.reducer;
